(()=>{"use strict";function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}const t=function(){function t(e){var n=e.baseUrl,o=e.headers;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this._baseUrl=n,this._authorize=o.authorization,this._contentType=o["Content-Type"]}var n,o;return n=t,(o=[{key:"getInitialCards",value:function(){return fetch("".concat(this._baseUrl,"/cards"),{method:"GET",headers:{authorization:this._authorize}}).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))})).catch((function(e){console.log(e)}))}},{key:"getUserInfo",value:function(){return fetch("".concat(this._baseUrl,"/users/me"),{method:"GET",headers:{authorization:this._authorize}}).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))})).catch((function(e){console.log(e)}))}},{key:"editProfile",value:function(e){return fetch("".concat(this._baseUrl,"/users/me"),{method:"PATCH",headers:{authorization:this._authorize,"Content-Type":this._contentType},body:JSON.stringify({name:e.name,about:e.about})}).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))})).catch((function(e){console.log(e)}))}},{key:"editAvatar",value:function(e){var t=e.link;return fetch("".concat(this._baseUrl,"/users/me/avatar"),{method:"PATCH",headers:{authorization:this._authorize,"Content-Type":this._contentType},body:JSON.stringify({avatar:t})}).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))})).catch((function(e){console.log(e)}))}},{key:"addCard",value:function(e){return fetch("".concat(this._baseUrl,"/cards"),{method:"POST",headers:{authorization:this._authorize,"Content-Type":this._contentType},body:JSON.stringify({name:e.name,link:e.link})}).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))})).catch((function(e){console.log(e)}))}},{key:"addLike",value:function(e){return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"PUT",headers:{authorization:this._authorize}}).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))})).catch((function(e){console.log(e)}))}},{key:"removeLike",value:function(e){return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"DELETE",headers:{authorization:this._authorize}}).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))})).catch((function(e){console.log(e)}))}},{key:"deleteCard",value:function(e){return fetch("".concat(this._baseUrl,"/cards/").concat(e),{method:"DELETE",headers:{authorization:this._authorize,"Content-Type":this._contentType}}).then((function(e){return e.ok?e:Promise.reject("Error: ".concat(e.status))})).catch((function(e){console.log(e)}))}}])&&e(n.prototype,o),t}();var n={formSelector:".form",inputSelector:".popup__input",submitButton:".popup__save-button",inactiveButtonClass:"popup__save-button_disabled",inputErrorClass:"popup__input-error",inputBorderError:"popup__input-error_color"},o=document.querySelector(".popup__close-button_images"),r=document.querySelector(".popup__form-places"),i=(document.querySelector(".popup"),document.querySelector(".popup__input_text_name")),a=document.querySelector(".popup__input_text_title"),c=document.querySelector(".popup__close-button_places"),u=document.querySelector(".profile__add"),s=document.querySelector(".profile__edit"),l=(document.querySelector(".profile__name"),document.querySelector(".profile__title"),document.querySelector(".popup__close-button_profile")),f=document.querySelector(".profile__img-edit"),p=document.querySelector(".popup__close-button_avatar");function h(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}document.querySelector(".places__heart-button");const d=function(){function e(t){var n=t.data,o=t.handleCardClick,r=t.template,i=t.isMine,a=t.myId,c=t.handleDeleteCard,u=t.handleCardLikes;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._template=r,this._element=this._getTemplate(),this._data=n,this._name=n.name,this._link=n.link,this._alt=n.name,this._likes=n.likes,this._handleCardClick=o,this._isMine=i,this._myId=a,this._handleDeleteCard=c,this.handleCardLikes=u,this._heartButton=this._element.querySelector(".places__heart-button"),this._heartCount=this._element.querySelector(".places__heart-count")}var t,n;return t=e,(n=[{key:"_getTemplate",value:function(){return document.querySelector(this._template).content.cloneNode(!0)}},{key:"_setEventListeners",value:function(){var e=this;this.placeImage.addEventListener("click",(function(){e._handleCardClick(e._name,e._link)})),this._trashButton.addEventListener("click",(function(){e._handleDeleteCard()})),this._heartButton.addEventListener("click",(function(){e.handleCardLikes()}))}},{key:"isLiked",value:function(){return!!this._heartButton.classList.contains("places__heart-button_active")}},{key:"addLike",value:function(){this._heartButton.classList.add("places__heart-button_active")}},{key:"removeLike",value:function(){this._heartButton.classList.remove("places__heart-button_active")}},{key:"updateLikes",value:function(e){this._heartCount.textContent=e.length}},{key:"_showLikes",value:function(){var e=this;this._likes.forEach((function(t){t._id===e._myId()&&e._heartButton.classList.add("places__heart-button_active")}))}},{key:"_removeDeleteButton",value:function(){this._trashButton.style.display="none"}},{key:"generateCard",value:function(){var e=this._element.querySelector(".places__img"),t=this._element.querySelector(".places__name");return this._trashButton=this._element.querySelector(".places__delete-button"),this.placeImage=e,this.placeName=t,this.placeImage.src=this._link,this.placeName.textContent=this._name,this.placeImage.alt=this.placeName.textContent,this._isMine()||this._removeDeleteButton(),this._showLikes(),this._heartCount.textContent=this._data.likes.length,this._setEventListeners(),this._element.firstElementChild}}])&&h(t.prototype,n),e}();function _(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}const y=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.settingsObj=t,this._inputSelector=t.inputSelector,this._submitButton=t.submitButton,this._inactiveButtonClass=t.inactiveButtonClass,this._inputErrorClass=t.inputErrorClass,this._inputBorderError=t.inputBorderError,this.formElement=n}var t,n;return t=e,(n=[{key:"_showInputError",value:function(e,t){var n=this.formElement.querySelector("#".concat(e.id,"-error"));e.classList.add(this._inputBorderError),n.textContent=t}},{key:"_hideInputError",value:function(e){var t=this.formElement.querySelector("#".concat(e.id,"-error"));e.classList.remove(this._inputBorderError),t.textContent=""}},{key:"_checkInputValidity",value:function(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}},{key:"_hasInvalidInput",value:function(e){return e.some((function(e){return!e.validity.valid}))}},{key:"_toggleButtonState",value:function(e,t){this._hasInvalidInput(e)?(t.classList.add(this._inactiveButtonClass),t.disabled=!0):(t.classList.remove(this._inactiveButtonClass),t.disabled=!1)}},{key:"_setEventListeners",value:function(){var e=this,t=Array.from(this.formElement.querySelectorAll(this._inputSelector)),n=this.formElement.querySelector(this._submitButton);this._toggleButtonState(t,n),t.forEach((function(o){o.addEventListener("input",(function(){e._checkInputValidity(o),e._toggleButtonState(t,n)}))})),this.formElement.addEventListener("reset",(function(){t.forEach((function(o){e._hideInputError(o),e._toggleButtonState(t,n)}))}))}},{key:"enableValidation",value:function(e){this.formElement.addEventListener("submit",(function(e){e.preventDefault()})),this._setEventListeners()}}])&&_(t.prototype,n),e}();function v(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}const m=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._popup=document.querySelector(t),this._handleEscClose=this._handleEscClose.bind(this),this.handleCloseOverlay=this.handleCloseOverlay.bind(this)}var t,n;return t=e,(n=[{key:"_handleEscClose",value:function(e){"Escape"===e.key&&this.close()}},{key:"handleCloseOverlay",value:function(e){e.target.classList.contains("popup_open")&&this.close()}},{key:"open",value:function(){this._popup.classList.add("popup_open"),document.addEventListener("keydown",this._handleEscClose),this._popup.addEventListener("click",this.handleCloseOverlay)}},{key:"close",value:function(){this._popup.classList.remove("popup_open"),document.removeEventListener("keydown",this._handleEscClose),this._popup.removeEventListener("click",this.handleCloseOverlay)}},{key:"setEventListeners",value:function(){var e=this;this._popup.querySelector(".popup__close-button").addEventListener("click",(function(){e.close()}))}}])&&v(t.prototype,n),e}();function b(e){return(b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function k(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function g(e,t,n){return(g="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var o=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=C(e)););return e}(e,t);if(o){var r=Object.getOwnPropertyDescriptor(o,t);return r.get?r.get.call(n):r.value}})(e,t,n||e)}function E(e,t){return(E=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function S(e,t){return!t||"object"!==b(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function C(e){return(C=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const L=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&E(e,t)}(a,e);var t,n,o,r,i=(o=a,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=C(o);if(r){var n=C(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return S(this,e)});function a(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(n=i.call(this,e))._submitHandler=t,n._form=n._popup.querySelector(".form"),n._saveButton=n._popup.querySelector(".popup__save-button"),n}return t=a,(n=[{key:"_getInputValues",value:function(){var e=this._form.querySelectorAll(".popup__input"),t={};return e.forEach((function(e){t[e.name]=e.value})),t}},{key:"close",value:function(){g(C(a.prototype),"close",this).call(this),this._form.reset()}},{key:"isLoading",value:function(e){e?(this._saveButton.textContent="Saving...",console.log(this._saveButton.textContent)):(this._saveButton.textContent="",console.log(this._saveButton.textContent))}},{key:"setEventListeners",value:function(){var e=this;g(C(a.prototype),"setEventListeners",this).call(this),this._form.addEventListener("submit",(function(t){e.isLoading(!0),console.log("loading");var n=e._getInputValues();e._submitHandler(n),t.preventDefault(),e.close(),e.isLoading(!1),console.log("loaded")}))}}])&&k(t.prototype,n),a}(m);function w(e){return(w="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function O(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function j(e,t,n){return(j="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var o=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=q(e)););return e}(e,t);if(o){var r=Object.getOwnPropertyDescriptor(o,t);return r.get?r.get.call(n):r.value}})(e,t,n||e)}function P(e,t){return(P=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function I(e,t){return!t||"object"!==w(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function q(e){return(q=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const T=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&P(e,t)}(a,e);var t,n,o,r,i=(o=a,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=q(o);if(r){var n=q(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return I(this,e)});function a(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,e))._popupPhoto=t._popup.querySelector(".popup__image"),t._popupTitle=t._popup.querySelector(".popup__image-title"),t}return t=a,(n=[{key:"open",value:function(e,t){j(q(a.prototype),"open",this).call(this),this._popupPhoto.src=t,this._popupTitle.textContent=e}}])&&O(t.prototype,n),a}(m);function B(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}const R=function(){function e(t,n){var o=t.items,r=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._items=o,this._renderer=r,this._cardElement=document.querySelector(n)}var t,n;return t=e,(n=[{key:"renderItems",value:function(e){var t=this;e.forEach((function(e){t._renderer(e)}))}},{key:"addItem",value:function(e){this._cardElement.prepend(e)}}])&&B(t.prototype,n),e}();function x(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}const D=function(){function e(t){var n=t.nameSelector,o=t.jobSelector,r=t.avatarSelector;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._name=document.querySelector(n),this._job=document.querySelector(o),this._avatar=document.querySelector(r)}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return{name:this._name.textContent,job:this._job.textContent,myId:this.myId}}},{key:"setUserInfo",value:function(e){this._name.textContent=e.name,this._job.textContent=e.about,this.myId=e._id}},{key:"changeAvatar",value:function(e){this._avatar.style.backgroundImage="url(".concat(e.avatar,")")}}])&&x(t.prototype,n),e}();function U(e){return(U="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function z(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function A(e,t,n){return(A="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var o=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=M(e)););return e}(e,t);if(o){var r=Object.getOwnPropertyDescriptor(o,t);return r.get?r.get.call(n):r.value}})(e,t,n||e)}function N(e,t){return(N=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function V(e,t){return!t||"object"!==U(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function M(e){return(M=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const H=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&N(e,t)}(a,e);var t,n,o,r,i=(o=a,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=M(o);if(r){var n=M(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return V(this,e)});function a(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,e))._submitDelete=document.querySelector(".popup__save-button_delete"),t}return t=a,(n=[{key:"_openDeletePopup",value:function(){this.open()}},{key:"setSubmitAction",value:function(e){this._handleSubmitCallback=e}},{key:"setEventListeners",value:function(){var e=this;A(M(a.prototype),"setEventListeners",this).call(this),this._submitDelete.addEventListener("click",(function(){e._handleSubmitCallback()}))}}])&&z(t.prototype,n),a}(m);var J=new t({baseUrl:"https://around.nomoreparties.co/v1/group-8",headers:{authorization:"b69d5aa5-1ef4-42e6-80ff-c5b2987c86bb","Content-Type":"application/json"}}),G=function(e){var t=new d({data:e,handleCardClick:function(e,t){Q.open(e,t)},template:"#place-template",isMine:function(){return e.owner._id===W.getUserInfo().myId},myId:function(){return W.getUserInfo().myId},handleDeleteCard:function(){F._openDeletePopup(),F.setSubmitAction((function(){K(e,n)}))},handleCardLikes:function(){t.isLiked()?J.removeLike(e._id).then((function(e){t.updateLikes(e.likes),t.removeLike()})):J.addLike(e._id).then((function(e){t.updateLikes(e.likes),t.addLike()}))}}),n=t.generateCard();return n},F=new H(".popup__delete");F.setEventListeners();var K=function(e,t){J.deleteCard(e._id).then((function(){F.close(),t.remove()}))},Q=new T(".popup_image-large");Q.setEventListeners();var W=new D({nameSelector:".profile__name",jobSelector:".profile__title",avatarSelector:".profile__img"});J.getUserInfo().then((function(e){W.setUserInfo(e),W.changeAvatar(e)})).then((function(e){J.getInitialCards().then((function(e){X.renderItems(e.reverse())})).catch((function(e){console.log(e)}))}));var X=new R({items:[],renderer:function(e){var t=G(e);X.addItem(t)}},".places__list"),Y=new L(".popup_edit-profile",(function(e){J.editProfile(e).then((function(e){W.setUserInfo(e)})).catch((function(e){console.log(e)}))}));Y.setEventListeners();var Z=new L(".popup_edit-places",(function(e){J.addCard(e).then((function(e){var t=G(e);X.addItem(t),Z.isLoading(!0)})).catch((function(e){console.log(e)})),Z.isLoading(!1)}));Z.setEventListeners();var $=new L(".popup__edit-avatar",(function(e){J.editAvatar(e).then((function(e){console.log(e),W.changeAvatar(e)})).catch((function(e){console.log(e)}))}));f.addEventListener("click",(function(){$.open()})),$.setEventListeners(),s.addEventListener("click",(function(){var e=W.getUserInfo();console.log(e),i.value=e.name,a.value=e.job,Y.open()})),l.addEventListener("click",(function(){Y.close()})),u.addEventListener("click",(function(){Z.open(),ee(r)})),c.addEventListener("click",(function(){Z.close()})),o.addEventListener("click",(function(){Q.close()})),p.addEventListener("click",(function(){$.close()}));var ee=function(e){e.reset()};Array.from(document.querySelectorAll(n.formSelector)).forEach((function(e){new y(n,e).enableValidation(n)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,